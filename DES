# Key Schedule Algorithm
def generate_round_keys(key):
    round_keys = []

    pc1_table = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18,
                 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36,
                 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22,
                 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4]
    pc2_table = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19,
                 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37,
                 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34,
                 53, 46, 42, 50, 36, 29, 32]
    round_shifts = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]

    key_permuted = [key[pc1 - 1] for pc1 in pc1_table]
    left_half = key_permuted[:28]
    right_half = key_permuted[28:]

    for round_num in range(16):
        left_half = left_half[round_shifts[round_num]:] + left_half[:round_shifts[round_num]]
        right_half = right_half[round_shifts[round_num]:] + right_half[:round_shifts[round_num]]
        round_key = [left_half[pc2 - 1] for pc2 in pc2_table] + [right_half[pc2 - 1] for pc2 in pc2_table]
        round_keys.append(round_key)

    return round_keys

# S-box substitution
def s_box_substitution(input_bits):
    s_box = [
        [[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
         [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
         [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
         [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]],
        [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
         [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
         [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
         [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]]
    ]

    output_bits = ''
    for i in range(8):
        row = int(input_bits[i*6] + input_bits[i*6 + 5], 2)
        col = int(input_bits[i*6 + 1:i*6 + 5], 2)
        output_bits += format(s_box[i][row][col], '04b')

    return output_bits

# Test key generation and S-box substitution
def main():
    key = '0001001100110100010101110111100110011011101111001101111111110001'
    round_keys = generate_round_keys(key)

    print("Round Keys:")
    for i, round_key in enumerate(round_keys):
        print(f"Round {i+1}: {''.join(round_key)}")

    input_bits = '011110011000101010101111'
    output_bits = s_box_substitution(input_bits)
    print("\nS-box Output Bits:", output_bits)

if __name__ == "__main__":
    main()
